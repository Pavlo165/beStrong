trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - "*"

variables:
- group: terrafrom_var
- group: Azure

stages:
  - stage: Plan
    displayName: "Terraform plan on PR"
    jobs:
      - job: PR_Plan
        displayName: "Terraform Plan on PR"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(ServiceConnection)
              backendAzureRmResourceGroupName: $(backendGroup)
              backendAzureRmStorageAccountName: $(backendStorage)
              backendAzureRmContainerName: $(backendContainer)
              backendAzureRmKey: $(backendKey)
            displayName: "Terraform Init"

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'validate'
            displayName: "Terraform Validate"

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: $(ServiceConnection)
            displayName: "Terraform Plan"
            env:
              TF_VAR_login_for_sql: $(TF_VAR_login_for_sql)
              TF_VAR_password_for_sql: $(TF_VAR_password_for_sql)
              TF_VAR_org_ip: $(TF_VAR_org_ip)

  - stage: Apply
    displayName: "Apply Terraform"
    dependsOn: Plan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: ApplyTerraform
        displayName: "Terrafrom Apply"
        environment: "production"
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
              - checkout: self
                displayName: "Checkout repository"

              - task: TerraformTaskV4@4
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: $(ServiceConnection)
                  backendAzureRmResourceGroupName: $(backendGroup)
                  backendAzureRmStorageAccountName: $(backendStorage)
                  backendAzureRmContainerName: $(backendContainer)
                  backendAzureRmKey: $(backendKey)
                displayName: "Terraform Init"

              - task: TerraformTaskV4@4
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  environmentServiceNameAzureRM: $(ServiceConnection)
                  commandOptions: '-auto-approve'
                displayName: "Terraform Apply"
                env:
                  TF_VAR_login_for_sql: $(TF_VAR_login_for_sql)
                  TF_VAR_password_for_sql: $(TF_VAR_password_for_sql)
                  TF_VAR_org_ip: $(TF_VAR_org_ip)
              
              - task: AzureCLI@2
                inputs:
                  azureSubscription: $(ServiceConnection)
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    MY_IP=$(curl -s ifconfig.me)
                    az storage account network-rule remove \
                      --resource-group "beStrongApp" \
                      --account-name "beststrongstorage02" \
                      --ip-address $MY_IP
                    az keyvault network-rule add \
                      --resource-group "beStrongApp" \
                      --name "kv-bestrong" \
                      --ip-address $MY_IP
                  displayName: "Fix firewall rule"